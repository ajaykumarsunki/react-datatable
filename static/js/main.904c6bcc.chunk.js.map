{"version":3,"sources":["components/CheckBox.js","components/TableRow.js","components/Table.js","App.js","index.js"],"names":["CheckBox","props","handleChkChange","evt","handleChange","console","log","state","isChecked","bind","type","onChange","this","checked","Component","TableRow","contact","selectAllOrNone","formatter","Intl","NumberFormat","style","currency","undefined","addSelection","target","resetSelectAllOrNone","contact_name","company_name","email","phone","gst_treatment","className","format","outstanding_receivable_amount","outstanding_payable_amount","Table","getAllContacts","fetch","method","then","res","json","catch","err","modifySelectedContacts","selectedIds","contactId","contact_id","setState","arrAfterDeleting","filter","x","onLoadClicked","data","error","sortedTable","tbl","sortConfig","sortColumn","sortedTbl","sortOrder","sort","a","b","sortTable","event","colName","preventDefault","contacts","renderContacts","doSelectAllOrNone","selection","map","c","arr","onClick","e","width","idx","length","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.904c6bcc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class CheckBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"constructor\");\r\n\r\n    this.state = {\r\n      isChecked: false,\r\n    };\r\n\r\n    this.handleChkChange = this.handleChkChange.bind(this);\r\n  }\r\n\r\n  handleChkChange = (evt) => this.props.handleChange(evt);\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"checkbox\"\r\n        onChange={this.handleChkChange}\r\n        checked={this.props.isChecked}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport CheckBox from \"./CheckBox\";\r\n\r\nfunction TableRow(props) {\r\n  const { contact, selectAllOrNone } = props;\r\n\r\n  const handleChkChange = function (evt) {\r\n    props.addSelection(contact, evt.target.checked);\r\n    props.resetSelectAllOrNone();\r\n  };\r\n\r\n  const formatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  });\r\n\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <CheckBox\r\n          selectAllOrNone={selectAllOrNone}\r\n          isChecked={\r\n            selectAllOrNone == 1\r\n              ? true\r\n              : selectAllOrNone == -1\r\n              ? false\r\n              : undefined\r\n          }\r\n          handleChange={handleChkChange}\r\n        />\r\n      </td>\r\n      <td>{contact.contact_name}</td>\r\n      <td>{contact.company_name}</td>\r\n      <td>{contact.email}</td>\r\n      <td>{contact.phone}</td>\r\n      <td>{contact.gst_treatment}</td>\r\n      <td className=\"right-justify\">\r\n        {formatter.format(contact.outstanding_receivable_amount)}\r\n      </td>\r\n      <td className=\"right-justify\">\r\n        {formatter.format(contact.outstanding_payable_amount)}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { Component } from \"react\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nexport default class Table extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      data: { contacts: [] },\r\n      error: null,\r\n      sortConfig: {\r\n        sortColumn: \"contact_name\",\r\n        sortOrder: 1, //1 = ascending, else descending\r\n      },\r\n      selectedIds: [],\r\n      selectAllOrNone: 0, //default: 0, select all: 1, select none: -1\r\n    };\r\n\r\n    this.onLoadClicked = this.onLoadClicked.bind(this);\r\n    this.sortTable = this.sortTable.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.onLoadClicked();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\r\n      \"total: \" +\r\n        this.state.selectedIds.length +\r\n        \" | \" +\r\n        this.state.selectedIds.join(\" | \")\r\n    );\r\n  }\r\n\r\n  getAllContacts = () => {\r\n    return fetch(\"https://react-datatable-backend.herokuapp.com/contacts\", {\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => res.json())\r\n      .catch((err) => err.json());\r\n  };\r\n\r\n  modifySelectedContacts = (contact, isChecked) => {\r\n    const { selectedIds } = this.state;\r\n    const contactId = contact.contact_id;\r\n\r\n    if (isChecked) {\r\n      this.setState({\r\n        selectedIds: [...selectedIds, contactId],\r\n      });\r\n    } else {\r\n      const arrAfterDeleting = selectedIds.filter((x) => x != contactId);\r\n      this.setState({\r\n        selectedIds: arrAfterDeleting,\r\n      });\r\n    }\r\n  };\r\n\r\n  onLoadClicked = () => {\r\n    this.getAllContacts()\r\n      .then((data) => {\r\n        this.setState({ data: data });\r\n      })\r\n      .catch((err) => this.setState({ error: err }));\r\n  };\r\n\r\n  //sorting function\r\n  sortedTable = (tbl) => {\r\n    const { sortConfig } = this.state;\r\n    if (sortConfig.sortColumn != \"\") {\r\n      let sortedTbl = [...tbl];\r\n      let sortColumn = sortConfig.sortColumn;\r\n      let sortOrder = sortConfig.sortOrder;\r\n\r\n      //sort using a custom function\r\n      sortedTbl.sort((a, b) => {\r\n        if (a[sortColumn] < b[sortColumn]) {\r\n          return -1 * sortOrder;\r\n        }\r\n        if (a[sortColumn] == b[sortColumn]) {\r\n          return 0;\r\n        }\r\n        if (a[sortColumn] > b[sortColumn]) {\r\n          return 1 * sortOrder;\r\n        }\r\n      });\r\n      return sortedTbl;\r\n    }\r\n\r\n    //if sortconfig is not set, return table as is\r\n    else return tbl;\r\n  };\r\n\r\n  sortTable = (event, colName) => {\r\n    event.preventDefault();\r\n\r\n    let { sortColumn, sortOrder } = this.state.sortConfig;\r\n    if (colName == sortColumn) {\r\n      sortOrder = sortOrder * -1;\r\n    }\r\n\r\n    this.setState({ sortConfig: { sortColumn: colName, sortOrder } });\r\n\r\n    const { contacts } = this.state.data;\r\n    this.renderContacts(contacts);\r\n  };\r\n\r\n  doSelectAllOrNone = function (evt) {\r\n    const { selectedIds } = this.state;\r\n    const { contacts } = this.state.data;\r\n\r\n    const isChecked = evt.target.checked;\r\n\r\n    let selection = [];\r\n\r\n    //clear selection\r\n    if (!isChecked) {\r\n      this.setState({\r\n        selectedIds: selection,\r\n        selectAllOrNone: -1,\r\n      });\r\n    }\r\n    //else select all\r\n    else {\r\n      selection = contacts.map((c) => c.contact_id);\r\n      this.setState({\r\n        selectedIds: selection,\r\n        selectAllOrNone: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  resetSelectAllOrNone = () => this.setState({ selectAllOrNone: 0 });\r\n\r\n  renderContacts = (arr) => {\r\n    let sortedTbl = this.sortedTable(arr);\r\n\r\n    return (\r\n      <div>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>\r\n                <button onClick={(e) => this.sortTable(e, \"contact_name\")}>\r\n                  <span className=\"th\">NAME</span>\r\n                  <span className=\"arrows\">⇅</span>\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button onClick={(e) => this.sortTable(e, \"company_name\")}>\r\n                  <span className=\"th\">COMPANY NAME</span>\r\n                  <span className=\"arrows\">⇅</span>\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button onClick={(e) => this.sortTable(e, \"email\")}>\r\n                  <span className=\"th\">EMAIL</span>\r\n                  <span className=\"arrows\">⇅</span>\r\n                </button>\r\n              </th>\r\n              <th style={{ width: \"175px\" }}>\r\n                <button onClick={(e) => this.sortTable(e, \"phone\")}>\r\n                  <span className=\"th\">WORK PHONE</span>\r\n                  <span className=\"arrows\">⇅</span>\r\n                </button>\r\n              </th>\r\n              <th style={{ width: \"190px\" }}>\r\n                <button onClick={(e) => this.sortTable(e, \"gst_treatment\")}>\r\n                  <span className=\"th\">GST TREATMENT </span>\r\n                  <span className=\"arrows\">⇅</span>\r\n                </button>\r\n              </th>\r\n              <th style={{ width: \"175px\" }}>\r\n                <button\r\n                  onClick={(e) =>\r\n                    this.sortTable(e, \"outstanding_receivable_amount\")\r\n                  }\r\n                >\r\n                  <span className=\"th\">RECEIVABLES</span>\r\n                  <span className=\"arrows\">⇅</span>\r\n                </button>\r\n              </th>\r\n              <th style={{ width: \"175px\" }}>\r\n                <button\r\n                  onClick={(e) =>\r\n                    this.sortTable(e, \"outstanding_payable_amount\")\r\n                  }\r\n                >\r\n                  <span className=\"th\">PAYABLES</span>\r\n                  <span className=\"arrows\">⇅</span>\r\n                </button>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedTbl.map((c, idx) => {\r\n              return (\r\n                <TableRow\r\n                  key={idx}\r\n                  contact={c}\r\n                  addSelection={this.modifySelectedContacts}\r\n                  selectAllOrNone={this.state.selectAllOrNone}\r\n                  resetSelectAllOrNone={this.resetSelectAllOrNone}\r\n                />\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <p className=\"selection-count\">{`${this.state.selectedIds.length} selected`}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { contacts } = this.state.data;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"results\">\r\n          {contacts.length ? this.renderContacts(contacts) : \"\"}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport Table from \"./components/Table\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}